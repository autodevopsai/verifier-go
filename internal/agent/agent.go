package agent

import "time"

// AgentContext provides context to a running agent.
type AgentContext struct {
	RepoPath string
	Branch   string
	Diff     string
	Files    []string
	Env      map[string]string
}

// AgentArtifact represents a file or content generated by an agent.
type AgentArtifact struct {
	Type    string `json:"type"`
	Path    string `json:"path,omitempty"`
	Content string `json:"content,omitempty"`
}

// AgentResult is the output from an agent execution.
type AgentResult struct {
	AgentID     string          `json:"agent_id"`
	Status      string          `json:"status"` // "success", "failure", "skipped"
	Error       string          `json:"error,omitempty"`
	Data        any             `json:"data,omitempty"`
	Severity    string          `json:"severity,omitempty"` // "info", "warning", "blocking"
	TokensUsed  int             `json:"tokens_used,omitempty"`
	Cost        float64         `json:"cost,omitempty"`
	Score       int             `json:"score,omitempty"`
	Artifacts   []AgentArtifact `json:"artifacts,omitempty"`
	Timestamp   string          `json:"timestamp"`
}

// BaseAgent provides a common structure for agents.
type BaseAgent struct {
	id          string
	description string
	model       string
}

func (b *BaseAgent) ID() string {
	return b.id
}

func (b *BaseAgent) Description() string {
	return b.description
}

func (b *BaseAgent) Model() string {
	return b.model
}

func (b *BaseAgent) CreateResult(partial AgentResult) AgentResult {
	partial.AgentID = b.ID()
	if partial.Status == "" {
		partial.Status = "success"
	}
	partial.Timestamp = time.Now().UTC().Format(time.RFC3339)
	return partial
}

// Agent is the interface that all verifier agents must implement.
type Agent interface {
	ID() string
	Description() string
	Model() string
	Execute(ctx AgentContext) (*AgentResult, error)
}
